/******************************************************************************

Controlling Three pins by Task Management using FreeRTOS

*******************************************************************************/
#include "main.h"

#include "cmsis_os.h"

#include "FreeRTOS.h"

//
// Define Thread IDs
#define LEDSLOW_Pin 0
#define LEDMEDIUM_Pin 1
#define LEDFAST_Pin 2
//
osThreadId_t LEDSTaskHandle, LEDMTaskHandle, LEDFTaskHandle; // Slow LED, Medium LED, Fast LED

//
// Slow LED task. Flash every second
//
void StartLEDSTask(void
  const * argument) {
  for (;;) {
    HAL_GPIO_TogglePin(GPIOC, LEDSLOW_Pin);
    osDelay(1000);
  }
}

//
// Medium LED task. Flash every 500ms
//
void StartLEDMTask(void
  const * argument) {
  for (;;) {
    HAL_GPIO_TogglePin(GPIOC, LEDMEDIUM_Pin);
    osDelay(500);
  }
}

//
// Fast LED task. Flash every 250ms
//
void StartLEDFTask(void
  const * argument) {
  for (;;) {
    HAL_GPIO_TogglePin(GPIOC, LEDFAST_Pin);
    osDelay(250);
  }
}

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
void StartDefaultTask(void * argument);

//
// Start of main program
//
int main(void) {
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();

  //
  //Slow LED Task attributes
  //
  const osThreadAttr_t LEDSTask_attributes = {
    .name = "LEDSTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128 * 4
  };

  //
  // Medium LED Task Attributes
  //
  const osThreadAttr_t LEDMTask_attributes = {
    .name = "LEDMTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128 * 4
  };

  //
  // Fast LED Task Attribute
  //
  const osThreadAttr_t LEDFTask_attributes = {
    .name = "LEDFTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128 * 4
  };

  /*Init Scheduler */
  osKernelInitialize();

  /*Creation of Tasks */
  LEDSTaskHandle = osThreadNew(StartLEDSTask, & LEDSLOW_Pin, & LEDSTask_attributes);
  LEDMTaskHandle = osThreadNew(StartLEDMTask, & LEDMEDIUM_Pin, & LEDMTask_attributes);
  LEDFTaskHandle = osThreadNew(StartLEDFTask, & LEDFAST_Pin, & LEDFTask_attributes);

  /* Start scheduler */
  osKernelStart();

  while (1) {}

}

void SystemClock_Config(void) {
  RCC_OscInitTypeDef RCC_OscInitStruct = {
    0
  };
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {
    0
  };

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HST;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 2;
  RCC_OscInitStruct.PLL.PLLN = 20;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig( & RCC_OscInitStruct) != HAL_OK) {
    Error_Handler();
  }

  RCC_ClLkInitStruct.ClockType =
    RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCL1 |
    RCC_CLOCKTYPE_PCLK2;
  RCC_ClUkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_CLkInitStruct.APBICLKDivider = RCC_HCLK_DIV1;
  RCC_CLkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig( & RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
    Error_Handler();
  }

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
    Error_Handler();
  }
}

static void MX_GPIO_Init(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {
      0
    };

    /* GPIO Ports Clock Enable */
    __HAL _RCC_GPIOC_CLK_ENABLE();

    /*Configure GPIO pin output Level */

    HAL_GPIO_WritePin(GPIOC, LEDSLOW_Pin | LEDMEDIUM_Pin; LEDFAST_Pin | GPIO_PIN_RESET);

    /* Configure GPIO pins : LEDSLOW_Pin LEDMEDIUM_pin LEDFAST_pin */

    GPIO_InitStruct.Pin = LEDSLOW_Pin | LEDMEDIUM_Pin | LEDFAST_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOC, & GPIO_InitStruct);

    void Error_Handler(void) {

    }

    #ifdef USE_FULL_ASSERT

    void assert_failed(uint8_t * file, uint32_t line) {

    }

    #endif
